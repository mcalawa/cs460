@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>About Homework 4</h2>
<p>Homework 4 was about learning to use ASP.NET MVC 5 without a database. The original assignment can be found <a href="https://www.wou.edu/~morses/classes/cs46x/assignments/HW4.html">here</a> and the code can be found <a href="https://github.com/mcalawa/senior_project/tree/master/CS_460_Software_Engineering/HW4">here</a>.</p>

<h2>Page 1</h2>
<p>For page 1, you were supposed to create a form with at least two fields where the data was received
    with a get and then something was done to manipulate the data before displaying it. I decided to do
    something to calculate how many days you have left until your next birthday. </p>

<img src="~/images/page1_part1.png" />

<p>The code starts out simple enough. There is a place to put your name (so I have something to address
    you by) and then there is a place to put your birth year. There is also a spot for an error message in 
    case any of the inputs are incorrect. Important to all of this is also the fact that the form uses the
    method get and that the action takes you to another page.</p>

<img src="~/images/page1_part2.png" />

<p>The next part of the code is in a div with the id restOfDate. This div's default styling has its visibility
    set to hidden. This is so that it will only show up when there is a proper year entered. This is important
    because the number of days in a month is decided by both the month and the year, so since I was planning
    to have the days in the month be created dynamically based on the month and the year, it was important 
    that the month and days in a month didn't show up until you'd entered a valid year. Also note that the months each have a numeric value rather than a string, which makes it easier to 
    process the selections made by the user.</p>

<img src="~/images/page1_part3.png" />

<p>For the sake of brevity, I am only showing the initial part of this select. Similarly to the months,
    each date has a numerical value. Everything is also wrapped in a div so it can be easily replaced when
    a different month is selected. The inital values are only for January and will be replaced dynamically
    when a different selection is made. Below I will showcase some of the Javascript that makes all of this
    work.</p>

<img src="~/images/page1_jspart1.png" />

<p>All of the Javascript for this is triggered when the input on the form elements is changed. The variable
    today is to make sure that the birthday they input is before the current date. In addition to the rest
    of the date entry not being visible to the user if they haven't entred a valid year, I also wanted to make
    the submit not work unless everything had been filled out correctly so that I didn't have to deal with strange
    errors. </p>

<img src="~/images/page1_jspart2.png" />

<p>There is a function at the end of the Javascript called isValidDate() which makes sure that everything is a
    proper date. Mostly, it is being used to check and make sure that it is a date that has already happened. 
    If it is, we want to check and see if the month picked out is February because the number of days in February
    will vary based on the year, so when you change the year, you'll also have to check to make sure the number of
    days in the month don't need to be changed and then change them if they do.</p> 

<p>In case this is the first time they have entered the year, we want to make sure that the places where they 
    can enter the rest of the date are now visible so that they can finish entering their birthday. Additionally,
    if there is a proper date and they have also entered their name already, we want them to be able to submit the
    form. If the year has not been entered properly at all, we want to make sure that they can't enter the rest 
    of the date until they have fixed the year and that the form can't be submitted yet. </p>

<img src="~/images/page1_jspart3.png" />

<p>Here is the isValidDate() function mentioned above. As you can see, it merely checks to make sure that a 
    date has already passed and returns true if it has. As stated before, this keeps someone from entering a 
    birthday that it is impossible for them to have.</p>

<p>The month change function is rather long, so I won't include most of it and will just include a small sample 
    to show that it is being used to call a function that will repopulate the daysContainer div with a select 
    that is valid for the particular month being picked.</p>

<img src="~/images/page1_jspart4.png" />

<p>The code to populate the days of the month dynamically is seen below: </p>

<img src="~/images/page1_jspart5.png" />

<p>As the demo is live, I will let you play with it yourself rather than showing screenshots of what it 
    looks like in action. The only thing to be shown for page 1 at this point is how it looks in the home 
    controller. </p>

<img src="~/images/page1_part4.png" />

<p>As you can see, it uses <code>[HttpGet]</code> to get the contents of the form and then actually displays 
    the results on a different page. Once again, the code to manipulate the data is quite long and has also been 
    well documented with comments, so I will allow you to look at it on GitHub rather than trying to display all of 
    it here. </p>

<h2>Page 2</h2>

<p>Page 2 is very similar to Page 1 since it uses the same form and all the Javascript is the same. 
    In order to save the viewer time, I won't rehash most of it, just show the differences in how it is 
    created. </p>

<img src="~/images/page2_part1.png" />

<p>The single biggest difference is that the method for page 2 is post and the result is not displayed on 
    a different page, but rather later on the same page:</p>

<img src="~/images/page2_part2.png" />

<p>The page uses Razor if statements to connect the view that is shown.</p>

<img src="~/images/page2_part3.png" />

<p>This difference is also apparent on the HomeController. Both of the controllers go to the same view, 
    but one of them is an <code>[HttpGet]</code> that receives the data and the other is an <code>[HttpPost]</code> 
    that is passed the data through a FormCollection and then manipulates it for display. The <code>ViewBag.RequestMethod = "GET";</code> 
    is used in the if statement on Page 2 that tells which content should be displayed. As you can see by 
    trying out the demo yourself, the two will look the same, but they function differently due to the way 
    they get the data.</p>

<h2>Page 3</h2>

<p>For Page 3 we were supposed to do something like a loan calculator (I did an investment calculator since 
    debt is depressing) and use model binding to get the information. The form code itself is relatively similar 
    to the form code used elsewhere on the site, even if the particulars are different, so I won't bother going 
    over it when you can look it up on my GitHub for yourself. The Javascript error checking is also similar and 
    won't be included here. The main difference is how the data is collected with model binding. An important 
    part of model binding is to make a model. A model is a class where you can get the information in a form from. 
    Here is the model that I created:</p>

<img src="~/images/modelbinding1.png" />

<p>The <code>get</code> and the <code>set</code> are used to get the information from the form and apply them 
    to the model. This is done in the HomeController with the following code:</p>

<img src="~/images/page3-1.png" />

<p>The information received is all calculated and then displayed on a different page by passing the message 
    created as a string to a new view like so:</p>

<img src="~/images/page3-2.png" />

<p>Finally, everything is displayed on the page itself:</p>

<img src="~/images/page3-3.png" />

<p>And that is how model binding works. For more detail, try out the demos and check the code on my GitHub.</p>

<h2>Demo Screenshots</h2>
<p>We were asked to include screenshots of the demo to prove that everything works even if we have a live demo, so here are some 
    final screenshots (taken on November 17th, 2017, since that matters for my "days until your birthday" calculator) to see you off:</p>

<img src="~/images/page1demo1.png" />

<p>The input for page 1.</p>

<img src="~/images/page1demo2.png" />

<p>The result for page 1. As you can see, the result is displayed on a different URL and the input has been received by query string.</p>

<img src="~/images/page2demo1.png" />

<p>The input for page 2.</p>

<img src="~/images/page2demo2.png" />

<p>The result for page 2. As you can see, the result is displayed on the same page.</p>

<img src="~/images/page3demo1.png" />

<p>The input for page 3.</p>

<img src="~/images/page3demo2.png" />

<p>The result for page 3. As you can see, the result is displayed on the same page.</p>